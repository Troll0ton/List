//! @file list.h

#ifndef   LIST_H
#define   LIST_H

//-----------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <locale.h>
#include <limits.h>
#include <stdint.h>

//-----------------------------------------------------------------------------

#define list_ctor(lst, capacity) stack_ctor_ (lst, capacity, #lst, __FILE__,  __LINE__)
#define list_dump(lst)           stack_dump_ (lst,                 __FILE__,  __LINE__)

//-----------------------------------------------------------------------------

#define lst_increase 1
#define lst_increase 0

//-----------------------------------------------------------------------------

enum ERROR_CODES_L
{
    ERR_CAP     = (1 << 1),
    ERR_RESIZE  = (1 << 2),
    
    //-----------------------------------------------------------------------------
    
    ERR_MEMBUF = (1 << 3),
    ERR_OVERF  = (1 << 4),
    ERR_CAP    = (1 << 5),
    ERR_SIZE   = (1 << 6),
    ERR_MEMSTK = (1 << 7),
    ERR_HASH   = (1 << 8)
};

//-----------------------------------------------------------------------------

typedef struct ListInfo
{
    const char *name;
    const char *file;
    int         line;
    int32_t     error_codes;
    char       *cur_status;
} ListInfo;

//-----------------------------------------------------------------------------

typedef struct Error_info
{
    int32_t error_code;
    char   *error_output;
} Error_info;

//-----------------------------------------------------------------------------

const struct Error_info error_arr_l[]
{
    {ERR_CAP,    "ERROR - incorrect capacity value (below zero)                      \n"},
    {ERR_RESIZE, "ERROR - incorrect resize parameter                                 \n"},
    
    //-----------------------------------------------------------------------------
    
    {ERR_MEMBUF, "ERROR - incorrect memory allocation for stack's data (NULL-pointer)\n"},
    {ERR_OVERF,  "ERROR - stack overflow                                             \n"},
    {ERR_CAP,    "ERROR - incorrect capacity value (below zero)                      \n"},
    {ERR_SIZE,   "ERROR - incorrect size value (below zero)                          \n"},
    {ERR_MEMSTK, "ERROR - incorrect memory allocation for stack (NULL-pointer)       \n"},
    {ERR_HASH,   "ERROR - data integrity breach (invalid hash)                       \n"},
};

//-----------------------------------------------------------------------------

typedef struct List
{
    StackInfo List_info;
    double   *buffer;
    int      *next;
    int      *prev;
    int       capacity;
    int       size;
} List;

//-----------------------------------------------------------------------------

#endif //LIST_H
